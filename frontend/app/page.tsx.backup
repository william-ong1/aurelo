"use client";
import React, { useState, useEffect } from 'react';
import { Plus, X, Edit2, Upload, FileText } from 'lucide-react';
import PositionAnalytics from './components/PositionAnalytics';
import PieChart from './components/PieChart';
import PerformanceSection from './components/PerformanceSection';
import { useRealTime } from './contexts/RealTimeContext';
import { useAuth } from './contexts/AuthContext';
import { disableBodyScroll, enableBodyScroll } from './utils/scrollLock';
import { getApiUrl } from './config/api';

interface Asset {
  id: number;
  name: string;
  isStock: boolean;
  ticker?: string;
  shares?: number;
  currentPrice?: number;
  purchasePrice?: number;
  balance?: number;
  apy?: number;
}

interface ParsedAsset {
  name: string;
  isStock: boolean;
  ticker?: string;
  shares?: number;
  currentPrice?: number;
  balance?: number;
  apy?: number;
}

function InputField({ label, ...props }: { label: string; [key: string]: unknown }) {
  return (
    <div>
      <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
        {label}
      </label>
      <input
        {...props}
        className="w-full px-3 sm:px-4 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-black focus:border-black hover:border-black transition-all text-sm"
      />
    </div>
  );
}

// Local storage utilities
const STORAGE_KEY = 'portfolio_assets';

const loadAssetsFromStorage = (): Asset[] => {
  if (typeof window === 'undefined') return [];
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    const assets = stored ? JSON.parse(stored) : [];
    return assets;
  } catch (error) {
    console.error('Error loading assets from localStorage:', error);
    return [];
  }
};

const saveAssetsToStorage = (assets: Asset[]) => {
  if (typeof window === 'undefined') return;
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(assets));
  } catch (error) {
    console.error('Error saving assets to localStorage:', error);
  }
};

export default function Home() {
  const { fetchPrices } = useRealTime();
  const { user, token, isAuthenticated, isLoading, logout } = useAuth();
  const [assets, setAssets] = useState<Asset[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [editingAsset, setEditingAsset] = useState<Asset | null>(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [uploadMode, setUploadMode] = useState<'manual' | 'image'>('manual');
  const [selectedImages, setSelectedImages] = useState<File[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [parsedAssets, setParsedAssets] = useState<ParsedAsset[]>([]);
  const [timePeriod, setTimePeriod] = useState<'all-time' | 'today'>('all-time');

  const [formData, setFormData] = useState({
    name: '',
    isStock: true,
    ticker: '',
    shares: '',
    price: '',
    balance: '',
    apy: ''
  });
  const [hasLoadedFromStorage, setHasLoadedFromStorage] = useState(false);
  const [isBannerMinimized, setIsBannerMinimized] = useState(true);
  const [isLoadingAssets, setIsLoadingAssets] = useState(true);

  // Load assets from backend when authenticated, localStorage when not
  useEffect(() => {
    if (isAuthenticated && token) {
      // When user becomes authenticated, sync local assets first, then load from backend
      const syncAndLoadAssets = async () => {
        setIsLoadingAssets(true);
        try {
          // Check if there are local assets to sync
          const storedAssets = loadAssetsFromStorage();
          if (storedAssets.length > 0) {
            // Sync local assets to backend
            const assetsForBackend = storedAssets.map(({ id, ...asset }) => asset);
            const syncResponse = await fetch(getApiUrl('/api/portfolio/save'), {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify({ assets: assetsForBackend })
            });
            
            if (syncResponse.ok) {
              console.log('Local assets synced to database successfully');
              // Clear local storage after successful sync
              saveAssetsToStorage([]);
            }
          }
          
          // Load the complete portfolio from backend (including synced assets)
          await loadPortfolioFromBackend();
        } catch (error) {
          console.error('Error syncing and loading assets:', error);
          // Fallback to loading from backend only
          await loadPortfolioFromBackend();
        } finally {
          setIsLoadingAssets(false);
        }
      };
      
      syncAndLoadAssets();
    } else if (!isAuthenticated && !isLoading && !hasLoadedFromStorage && !token) {
      // Load from localStorage if not authenticated and no token
      const storedAssets = loadAssetsFromStorage();
      setAssets(storedAssets);
      setHasLoadedFromStorage(true);
      setIsLoadingAssets(false);
    }
  }, [isAuthenticated, token, isLoading, hasLoadedFromStorage]);

  // Reset flags and clear assets when authentication state changes
  useEffect(() => {
    if (!isAuthenticated) {
      setHasLoadedFromStorage(false);
      setAssets([]); // Clear assets when user logs out
      setIsLoadingAssets(false); // Reset loading state when user logs out
    }
  }, [isAuthenticated, token]); // Also depend on token to catch token removal

  // Save assets to backend when authenticated, localStorage when not
  useEffect(() => {
    if (isAuthenticated && token) {
      // Save to backend when authenticated (including empty portfolio)
      savePortfolioToBackend();
    } else if (!isAuthenticated && hasLoadedFromStorage) {
      // Save to localStorage if not authenticated and we've already loaded from storage
      saveAssetsToStorage(assets);
    }
  }, [assets, isAuthenticated, token, hasLoadedFromStorage]);

  // Handle body scroll locking for modals
  useEffect(() => {
    if (showModal) {
      disableBodyScroll();
    } else {
      enableBodyScroll();
    }

    return () => {
      enableBodyScroll();
    };
  }, [showModal]);

  const loadPortfolioFromBackend = async () => {
    try {
              const response = await fetch(getApiUrl('/api/portfolio'), {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        const backendAssets = data.assets.map((asset: { [key: string]: unknown }, index: number) => ({
          ...asset,
          id: index + 1 // Generate local IDs
        }));
        setAssets(backendAssets);
      }
    } catch (error) {
      console.error('Error loading portfolio from backend:', error);
    }
  };

  const savePortfolioToBackend = async () => {
    try {
      const response = await fetch(getApiUrl('/api/portfolio/save'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ assets })
      });
      
      if (!response.ok) {
        console.error('Error saving portfolio to backend');
      } else {
        console.log('Portfolio saved to backend successfully');
      }
    } catch (error) {
      console.error('Error saving portfolio to backend:', error);
    }
  };

  const clearBackendPortfolio = async () => {
    if (!token) return;
    
    try {
      const response = await fetch(getApiUrl('/api/portfolio/save'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ assets: [] })
      });
      
      if (response.ok) {
        console.log('Backend portfolio cleared successfully');
      }
    } catch (error) {
      console.error('Error clearing backend portfolio:', error);
    }
  };



  // Fetch real-time prices when assets change
  useEffect(() => {
    const stockTickers = assets
      .filter(asset => asset.isStock && asset.ticker)
      .map(asset => asset.ticker!)
      .filter((ticker, index, arr) => arr.indexOf(ticker) === index);
    
    if (stockTickers.length > 0) {
      fetchPrices(stockTickers);
    }
  }, [assets, fetchPrices]);

  // Generate next ID
  const getNextId = () => {
    if (assets.length === 0) return 1;
    return Math.max(...assets.map(a => a.id)) + 1;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? e.target.checked : value
    }));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    setSelectedImages(imageFiles);
  };

  const processImagesWithGemini = async () => {
    if (selectedImages.length === 0) return;

    setIsProcessing(true);
    try {
      const imageRequests = [];
      
      for (const image of selectedImages) {
        const base64Image = await new Promise<string>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => {
            const result = reader.result as string;
            resolve(result.split(',')[1]);
          };
          reader.onerror = () => reject("Failed to read image");
          reader.readAsDataURL(image);
        });
        
        imageRequests.push({
          image: base64Image,
          mimeType: image.type
        });
      }

      const response = await fetch(getApiUrl('/api/parse-multiple-images'), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          images: imageRequests
        }),
      });

      if (!response.ok) throw new Error('Failed to process images');

      const data = await response.json();
      setParsedAssets(data.assets || []);
    } catch (error) {
      console.error('Error processing images:', error);
      alert('Failed to process images. Please try again or use manual entry.');
    } finally {
      setIsProcessing(false);
    }
  };


  const addParsedAssets = () => {
    setAssets(prev => {
      let nextId = prev.length === 0 ? 1 : Math.max(...prev.map(a => a.id)) + 1;
      const newAssets = [...prev];
      
      parsedAssets.forEach(asset => {
        const index = newAssets.findIndex(existing =>
          existing.isStock === asset.isStock &&
          ((existing.isStock && existing.ticker === asset.ticker) || (!existing.isStock && existing.name === asset.name))
        );
        
        if (index !== -1) {
          // Update existing asset
          if (asset.isStock) {
            const existingShares = newAssets[index].shares || 0;
            const existingPrice = newAssets[index].purchasePrice || newAssets[index].currentPrice || 0;
            const newShares = asset.shares || 0;
            const newPrice = asset.currentPrice || 0;
            
            const totalShares = existingShares + newShares;
            const weightedAveragePrice = totalShares > 0 
              ? ((existingShares * existingPrice) + (newShares * newPrice)) / totalShares
              : newPrice;
            
            newAssets[index].shares = totalShares;
            newAssets[index].purchasePrice = weightedAveragePrice;
            newAssets[index].currentPrice = asset.currentPrice;
          } else {
            newAssets[index].balance = (newAssets[index].balance || 0) + (asset.balance || 0);
            // Backend returns APY as decimal, so we keep it as is
            newAssets[index].apy = asset.apy;
          }
        } else {
          // Add new asset with unique ID and proper Asset format
          const newAsset: Asset = {
            ...asset,
            id: nextId++,
            purchasePrice: asset.isStock ? (asset.currentPrice || 0) : undefined
          };
          newAssets.push(newAsset);
        }
      });
      
      return newAssets;
    });
    
    setParsedAssets([]);
    setSelectedImages([]);
    setUploadMode('manual');
    setShowModal(false);
  };

  const handleSubmit = () => {
    if (!formData.name) return;
    let assetData: Partial<Asset>;

    if (formData.isStock) {
      if (!formData.ticker || !formData.shares || !formData.price) return;
      assetData = {
        name: formData.name,
        isStock: true,
        ticker: formData.ticker.toUpperCase(),
        shares: parseFloat(formData.shares) || 0,
        currentPrice: parseFloat(formData.price) || 0,
        purchasePrice: parseFloat(formData.price) || 0
      };
    } else {
      if (!formData.balance || !formData.apy) return;
      assetData = {
        name: formData.name,
        isStock: false,
        balance: parseFloat(formData.balance) || 0,
        apy: (parseFloat(formData.apy) || 0) / 100 // Convert percentage to decimal
      };
    }

    if (editingAsset) {
      // Update existing asset
      setAssets(prev => prev.map(asset => 
        asset.id === editingAsset.id 
          ? { ...asset, ...assetData }
          : asset
      ));
      setEditingAsset(null);
    } else {
      // Add new asset or combine with existing
      setAssets(prev => {
        const index = prev.findIndex(asset =>
          asset.isStock === assetData.isStock &&
          ((asset.isStock && asset.ticker === assetData.ticker) || (!asset.isStock && asset.name === assetData.name))
        );
        if (index !== -1) {
          const updated = [...prev];
          if (assetData.isStock) {
            const existingShares = updated[index].shares || 0;
            const existingPrice = updated[index].purchasePrice || 0;
            const newShares = assetData.shares || 0;
            const newPrice = assetData.purchasePrice || 0;
            
            // Calculate weighted average price
            const totalShares = existingShares + newShares;
            const weightedAveragePrice = totalShares > 0 
              ? ((existingShares * existingPrice) + (newShares * newPrice)) / totalShares
              : newPrice;
            
            updated[index].shares = totalShares;
            updated[index].purchasePrice = weightedAveragePrice;
          } else {
            updated[index].balance = (updated[index].balance || 0) + (assetData.balance || 0);
            updated[index].apy = assetData.apy;
          }
          return updated;
        }
        const nextId = prev.length === 0 ? 1 : Math.max(...prev.map(a => a.id)) + 1;
        return [...prev, { ...assetData, id: nextId } as Asset];
      });
    }

    setFormData({ name: '', isStock: true, ticker: '', shares: '', price: '', balance: '', apy: '' });
    setShowModal(false);
  };

  const handleEdit = (asset: Asset) => {
    setEditingAsset(asset);
    setFormData({
      name: asset.name,
      isStock: asset.isStock,
      ticker: asset.ticker || '',
      shares: asset.shares?.toString() || '',
      price: asset.purchasePrice?.toString() || asset.currentPrice?.toString() || '',
      balance: asset.balance?.toString() || '',
      apy: asset.apy ? (asset.apy * 100).toString() : '' // Convert decimal to percentage
    });
    setShowModal(true);
  };

  const handleDelete = (assetId: number) => {
    if (window.confirm('Are you sure you want to delete this asset?')) {
      setAssets(prev => prev.filter(asset => asset.id !== assetId));
    }
  };

  const closeModal = () => {
    setShowModal(false);
    setEditingAsset(null);
    setUploadMode('manual');
    setSelectedImages([]);
    setParsedAssets([]);
    setFormData({ name: '', isStock: true, ticker: '', shares: '', price: '', balance: '', apy: '' });
  };

  // Show loading state while checking authentication or loading assets
  if (isLoading || isLoadingAssets) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
        <main className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-xs sm:text-sm 2xl:text-base text-black font-medium">
              {isLoading ? 'Checking authentication...' : 'Loading portfolio...'}
            </p>
            <p className="text-[10px] sm:text-xs 2xl:text-sm text-gray-900 mt-1">
              {isLoading ? 'Verifying your login status' : 'Retrieving your portfolio data'}
            </p>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <main className="mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8 max-w-6xl 2xl:max-w-7xl">

          {/* Portfolio Allocation Section */}
          <section className="mb-8 sm:mb-12">
            <div className="flex flex-row justify-between items-center gap-4 mb-0">
            <div className="flex items-center gap-3">
                <h2 className="text-base text-lg 2xl:text-2xl font-semibold text-gray-800">Overview</h2>
              </div>
              <div className="flex items-center gap-1.5 sm:gap-3">
                <div className="flex items-center bg-gray-100 backdrop-blur-sm rounded-full p-1 border border-gray-200/90 gap-1">
                  <button
                    onClick={() => setTimePeriod('all-time')}
                    className={`px-1.5 sm:px-2 2xl:px-3 py-.7 sm:py-1 2xl:py-1.5 text-[.5rem] sm:text-[.6rem] 2xl:text-[.8rem] font-medium rounded-full transition-all duration-200 cursor-pointer ${
                      timePeriod === 'all-time' 
                        ? 'bg-white text-gray-900 shadow-sm ring-1 ring-gray-300 font-semibold' 
                        : 'text-black hover:text-gray-800 hover:bg-white/80'
                    }`}
                  >
                    All Time
                  </button>
                  <button
                    onClick={() => setTimePeriod('today')}
                    className={`px-1.5 sm:px-2 2xl:px-3 py-.7 sm:py-1 2xl:py-1.5 text-[.5rem] sm:text-[.6rem] 2xl:text-[.8rem] font-medium rounded-full transition-all duration-200 cursor-pointer ${
                      timePeriod === 'today' 
                        ? 'bg-white text-gray-900 shadow-sm ring-1 ring-gray-300 font-semibold' 
                        : 'text-black hover:text-gray-800 hover:bg-white/80'
                    }`}
                  >
                    Today
                  </button>
                </div>
                <div className="flex items-center gap-1 sm:gap-2">
                  <button
                    onClick={() => {if (assets.length > 0) {setIsEditMode(!isEditMode)}}}
                    disabled={assets.length === 0}
                    className={`p-1 sm:p-1.5 rounded-lg transition-all duration-200 ${
                      assets.length === 0
                        ? 'text-gray-200 cursor-not-allowed'
                        : isEditMode && assets.length > 0
                        ? 'text-gray-900 bg-white shadow-sm ring-1 ring-gray-300 cursor-pointer' 
                        : 'text-gray-400 hover:text-black transition-all cursor-pointer'
                    }`}
                    title={assets.length === 0 ? "No assets to edit" : isEditMode && assets.length > 0 ? "Exit Edit Mode" : "Edit Portfolio"}
                  >
                    <Edit2 className='w-3 h-3 sm:w-4 sm:h-4 2xl:w-5 2xl:h-5' />
                  </button>
                  <button
                    onClick={() => {
                      setIsEditMode(false);
                      setShowModal(true);
                    }}
                    disabled={isEditMode && assets.length > 0}
                    className={`p-1 sm:p-1.5 rounded-lg transition-colors ${
                      isEditMode && assets.length > 0
                        ? 'text-gray-200 cursor-not-allowed' 
                        : 'text-gray-400 hover:text-black transition-all cursor-pointer'
                    }`}
                    title={isEditMode && assets.length > 0 ? "Exit edit mode to add assets" : "Add Asset"}
                  >
                    <Plus className='w-4 h-4 sm:w-5 sm:h-5 2xl:w-6 2xl:h-6' />
                  </button>
                </div>
              </div>
            </div>
            <p className="text-xs 2xl:text-sm -mt-1 text-black mb-6">Breakdown of your asset allocation and performance</p>

            {/* Pie Chart */}
            <PieChart 
              assets={assets} 
              onEdit={handleEdit} 
              onDelete={handleDelete}
              isEditMode={isEditMode}
              timePeriod={timePeriod}
              isLoadingAssets={isLoadingAssets}
            />
          </section>

          {/* Position Analytics Section */}
          <div className="border-t border-gray-200 my-8 sm:my-8"></div>
          <section className="mb-8 sm:mb-12">
            <PositionAnalytics assets={assets} isLoadingAssets={isLoadingAssets} />
          </section>

          <div className="border-t border-gray-200 my-8 sm:my-8"></div>
          <PerformanceSection />

                     {/* Trading moved to /trading page */}

         </main>

      {/* Modal */}
      {showModal && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 transition-all p-3 sm:p-4"
        >
          <div className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-2xl p-3 sm:p-8 w-full max-w-lg mx-auto border border-gray-200/50 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-3 sm:mb-6">
              <h2 className="text-lg 2xl:text-2xl font-semibold text-gray-800">
                {editingAsset ? 'Edit Asset' : 'Add New Asset'}
              </h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-black transition-colors cursor-pointer"
              >
                <X size={20} className="h-6 w-6" />
              </button>
            </div>

            {!editingAsset && (
              <div className="mb-3 sm:mb-6">
                <div className="flex flex-row gap-2 sm:gap-3">
                  <button
                    onClick={() => setUploadMode('manual')}
                    className={`flex-1 flex items-center justify-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 sm:py-3 rounded-lg border-2 transition-all cursor-pointer ${
                      uploadMode === 'manual'
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-300 text-black hover:border-gray-400'
                    }`}
                  >
                    <FileText size={16} className="sm:w-5 sm:h-5" />
                    <span className="font-medium text-xs sm:text-sm 2xl:text-base">Manual Entry</span>
                  </button>
                  <button
                    onClick={() => setUploadMode('image')}
                    className={`flex-1 flex items-center justify-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 sm:py-3 rounded-lg border-2 transition-all cursor-pointer ${
                      uploadMode === 'image'
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-300 text-black hover:border-gray-400'
                    }`}
                  >
                    <Upload size={16} className="sm:w-5 sm:h-5" />
                    <span className="font-medium text-xs sm:text-sm 2xl:text-base">Upload Image</span>
                  </button>
                </div>
              </div>
            )}

            {uploadMode === 'image' && !editingAsset ? (
              <div className="space-y-4 sm:space-y-5">
                {selectedImages.length === 0 ? (
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 sm:p-8 text-center">
                    <Upload className="mx-auto h-8 w-8 sm:h-12 sm:w-12 text-gray-400 mb-3 sm:mb-4" />
                    <div className="text-xs sm:text-sm text-black mb-3 sm:mb-4">
                      Upload screenshots of your portfolio or holdings
                    </div>
                    <input
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleImageUpload}
                      className="hidden"
                      id="image-upload"
                    />
                    <label
                      htmlFor="image-upload"
                      className="inline-flex items-center px-3 sm:px-4 py-2 border border-transparent text-xs sm:text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 cursor-pointer"
                    >
                      Choose Images
                    </label>
                  </div>
                ) : (
                  <div className="space-y-3 sm:space-y-4">
                    {selectedImages.map((image, index) => (
                      <div key={index} className="flex items-center justify-between p-3 sm:p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center gap-2 sm:gap-3">
                          <div className="w-8 h-8 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                            <Upload className="h-4 w-4 sm:h-6 sm:w-6 text-blue-600" />
                          </div>
                          <div>
                            <div className="font-medium text-gray-900 text-xs sm:text-sm">{image.name}</div>
                            <div className="text-xs sm:text-sm text-gray-900">
                              {(image.size / 1024 / 1024).toFixed(2)} MB
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={() => {
                            setSelectedImages(selectedImages.filter((_, i) => i !== index));
                            setParsedAssets([]);
                            setIsProcessing(false);
                          }}
                          className="text-gray-400 hover:text-black cursor-pointer"
                        >
                          <X size={16} className="sm:w-5 sm:h-5" />
                        </button>
                      </div>
                    ))}
                    
                    {!isProcessing && parsedAssets.length === 0 && (
                      <button
                        onClick={processImagesWithGemini}
                        className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors cursor-pointer text-sm"
                      >
                        Process {selectedImages.length} Image{selectedImages.length !== 1 ? 's' : ''}
                      </button>
                    )}

                    {isProcessing && (
                      <div className="text-center py-6 sm:py-8">
                        <div className="animate-spin rounded-full h-6 w-6 sm:h-8 sm:w-8 border-b-2 border-blue-600 mx-auto mb-3 sm:mb-4"></div>
                        <div className="text-black text-sm">Processing {selectedImages.length} image{selectedImages.length !== 1 ? 's' : ''}...</div>
                      </div>
                    )}

                    {parsedAssets.length > 0 && (
                      <div className="space-y-3 sm:space-y-4">
                        <div className="text-xs sm:text-sm font-medium text-gray-700">
                          Found {parsedAssets.length} asset(s):
                        </div>
                        <div className="max-h-60 overflow-y-auto space-y-2">
                          {parsedAssets.map((asset, index) => (
                            <div key={index} className="p-2 sm:p-3 bg-gray-50 rounded-lg">
                              <div className="font-medium text-gray-900 text-xs sm:text-sm">
                                {asset.isStock ? asset.ticker : asset.name}
                              </div>
                              <div className="text-xs sm:text-sm text-black">
                                {asset.isStock 
                                  ? `${asset.shares} shares @ $${asset.currentPrice}`
                                  : `$${asset.balance} @ ${((asset.apy || 0) * 100).toFixed(2)}% APY`
                                }
                              </div>
                            </div>
                          ))}
                        </div>
                        <div className="flex flex-row gap-2 sm:gap-3">
                          <button
                            onClick={() => {
                              setParsedAssets([]);
                              setSelectedImages([]);
                              setIsProcessing(false);
                            }}
                            className="flex-1 px-3 sm:px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 font-medium transition-colors cursor-pointer text-xs sm:text-sm"
                          >
                            Try Again
                          </button>

                          <button
                            onClick={addParsedAssets}
                            className="flex-1 px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors cursor-pointer text-xs sm:text-sm"
                          >
                            Add All Assets
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ) : (
              <div className="space-y-4 sm:space-y-5">
                {/* Asset Name */}
                <div>
                  <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                    Asset Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    className="w-full px-3 sm:px-4 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-black focus:border-black hover:border-black transition-all text-sm"
                    placeholder="e.g., Apple Inc."
                  />
                </div>

                {/* Asset Type */}
                <div>
                  <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-2">
                    Asset Type
                  </label>
                  <div className="flex flex-row gap-4 sm:gap-6">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name="isStock"
                        value="true"
                        checked={formData.isStock === true}
                        onChange={() => setFormData(prev => ({ ...prev, isStock: true }))}
                      />
                      <span className="text-sm">Stock / ETF</span>
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        name="isStock"
                        value="false"
                        checked={formData.isStock === false}
                        onChange={() => setFormData(prev => ({ ...prev, isStock: false }))}
                      />
                      <span className="text-sm">Cash Account</span>
                    </label>
                  </div>
                </div>

                {/* Stock Fields */}
                {formData.isStock ? (
                  <>
                    <div>
                      <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
                        Ticker Symbol
                      </label>
                      <input
                        name="ticker"
                        value={formData.ticker}
                        onChange={(e) => {
                          const { name, value } = e.target;
                          setFormData(prev => ({
                            ...prev,
                            [name]: value.toUpperCase()
                          }));
                        }}
                        className="w-full px-3 sm:px-4 py-2 sm:py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-black focus:border-black hover:border-black transition-all text-sm"
                        placeholder="e.g., AAPL"
                      />
                    </div>
                    <InputField label="Number of Shares" name="shares" value={formData.shares} onChange={handleInputChange} type="number" step="0.001" placeholder="e.g., 10.5" />
                    <InputField label="Price per Share" name="price" value={formData.price} onChange={handleInputChange} type="number" step="0.01" placeholder="e.g., 150.00" />
                  </>
                ) : (
                  <>
                    <InputField label="Account Balance" name="balance" value={formData.balance} onChange={handleInputChange} type="number" step="0.01" placeholder="e.g., 5000.00" />
                    <InputField label="Annual Percentage Yield (APY)" name="apy" value={formData.apy} onChange={handleInputChange} type="number" step="0.1" placeholder="e.g., 4.5 (for 4.5%)" />
                  </>
                )}

                {/* Buttons */}
                <div className="flex flex-row gap-2 sm:gap-3 pt-3 sm:pt-4">
                  <button
                    onClick={closeModal}
                    className="flex-1 px-3 sm:px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 font-medium transition-colors cursor-pointer text-xs sm:text-sm"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleSubmit}
                    className="flex-1 px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors cursor-pointer text-xs sm:text-sm"
                  >
                    {editingAsset ? 'Update Asset' : 'Add Asset'}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Auth modal moved to global sidebar layout */}
    </div>
  );
}